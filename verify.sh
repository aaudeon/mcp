#!/bin/bash

# Script de v√©rification compl√®te du projet MCP Weather Server

echo "üîç V√©rification du Projet MCP Weather Server"
echo "============================================="

errors=0
warnings=0

# Fonction pour afficher les erreurs
error() {
    echo "‚ùå ERREUR: $1"
    ((errors++))
}

# Fonction pour afficher les avertissements
warning() {
    echo "‚ö†Ô∏è  ATTENTION: $1" 
    ((warnings++))
}

# Fonction pour afficher les succ√®s
success() {
    echo "‚úÖ $1"
}

# V√©rification des fichiers essentiels
echo "üìÅ V√©rification de la structure des fichiers..."

files_to_check=(
    "package.json"
    "tsconfig.json" 
    "Dockerfile"
    "docker-compose.yml"
    ".env.example"
    "src/index.ts"
    "README.md"
    "GETTING_STARTED.md"
)

for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        success "Fichier $file pr√©sent"
    else
        error "Fichier $file manquant"
    fi
done

# V√©rification de la compilation TypeScript
echo ""
echo "üî® V√©rification de la compilation..."
if npm run build > /dev/null 2>&1; then
    success "Compilation TypeScript r√©ussie"
else
    error "√âchec de la compilation TypeScript"
fi

# V√©rification des d√©pendances
echo ""
echo "üì¶ V√©rification des d√©pendances..."
if [ -d "node_modules" ]; then
    success "D√©pendances install√©es"
else
    error "D√©pendances manquantes (ex√©cutez: npm install)"
fi

# V√©rification du fichier .env
echo ""
echo "üîß V√©rification de la configuration..."
if [ -f ".env" ]; then
    if grep -q "WEATHER_API_KEY=.*[a-zA-Z0-9]" .env && ! grep -q "your_openweathermap_api_key_here" .env; then
        success "Fichier .env configur√© avec une cl√© API"
    else
        warning "Fichier .env pr√©sent mais cl√© API non configur√©e"
    fi
else
    warning "Fichier .env manquant (copiez .env.example vers .env)"
fi

# V√©rification de Docker
echo ""
echo "üê≥ V√©rification de Docker..."
if command -v docker &> /dev/null; then
    success "Docker install√©"
    
    if command -v docker-compose &> /dev/null; then
        success "Docker Compose install√© (version standalone)"
    elif docker compose version &> /dev/null; then
        success "Docker Compose install√© (int√©gr√© √† Docker)"
    else
        warning "Docker Compose non disponible"
    fi
else
    warning "Docker non install√©"
fi

# V√©rification de la structure du code
echo ""
echo "üìù V√©rification du code source..."
if grep -q "Weather MCP server running" src/index.ts; then
    success "Code principal du serveur MCP pr√©sent"
else
    error "Code principal du serveur MCP manquant ou incorrect"
fi

if grep -q "get_weather" src/index.ts; then
    success "Outil get_weather impl√©ment√©"
else
    error "Outil get_weather manquant"
fi

if grep -q "get_weather_forecast" src/index.ts; then
    success "Outil get_weather_forecast impl√©ment√©"
else
    error "Outil get_weather_forecast manquant"
fi

if grep -q "get_weather_by_coordinates" src/index.ts; then
    success "Outil get_weather_by_coordinates impl√©ment√©"
else
    error "Outil get_weather_by_coordinates manquant"
fi

# V√©rification des scripts
echo ""
echo "‚öôÔ∏è  V√©rification des scripts..."
if [ -x "deploy.sh" ]; then
    success "Script de d√©ploiement ex√©cutable"
else
    warning "Script de d√©ploiement non ex√©cutable (ex√©cutez: chmod +x deploy.sh)"
fi

if [ -x "test.sh" ]; then
    success "Script de test ex√©cutable"
else
    warning "Script de test non ex√©cutable (ex√©cutez: chmod +x test.sh)"
fi

# R√©sum√© final
echo ""
echo "üìä R√âSUM√â DE LA V√âRIFICATION"
echo "============================"

if [ $errors -eq 0 ]; then
    if [ $warnings -eq 0 ]; then
        echo "üéâ PARFAIT! Le projet est enti√®rement configur√© et pr√™t √† l'emploi."
        echo ""
        echo "üöÄ Prochaines √©tapes:"
        echo "   1. Copiez .env.example vers .env (si pas d√©j√† fait)"
        echo "   2. Ajoutez votre cl√© API OpenWeatherMap dans .env"
        echo "   3. Lancez: ./deploy.sh"
        echo "   4. Testez: ./test.sh"
    else
        echo "‚ö†Ô∏è  Le projet est fonctionnel mais avec $warnings avertissement(s)."
        echo "   Consultez les messages ci-dessus pour optimiser votre configuration."
    fi
else
    echo "‚ùå Le projet a $errors erreur(s) qui doivent √™tre corrig√©es."
    echo "   Consultez les messages d'erreur ci-dessus."
fi

echo ""
echo "üìö Pour plus d'informations:"
echo "   - Lisez GETTING_STARTED.md pour le guide de d√©marrage"
echo "   - Consultez README.md pour la documentation compl√®te"
echo "   - Ex√©cutez ./deploy.sh pour un d√©ploiement automatique"

exit $errors
