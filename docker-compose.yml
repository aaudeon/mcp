services:
  # Serveur MCP Weather
  mcp-weather-server:
    build: .
    container_name: mcp-weather-server
    environment:
      - NODE_ENV=production
      - PORT=3000
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-weather.rule=Host(`mcp-weather.top-exo.fr`)"
      - "traefik.http.routers.mcp-weather.entrypoints=https"
      - "traefik.http.routers.mcp-weather.tls.certresolver=myresolver"
      - "traefik.http.services.mcp-weather.loadbalancer.server.port=3000"
      - "traefik.docker.network=reverse-proxy"
    networks:
      - reverse-proxy
      - mcp-network

  # Base de données PostgreSQL pour n8n
  postgres:
    image: postgres:16-alpine
    container_name: n8n-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mcp-network

  # n8n - Plateforme d'automatisation workflow
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      # Configuration générale n8n
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=https://n8n.top-exo.fr/
      - N8N_EDITOR_BASE_URL=https://n8n.top-exo.fr/
      - GENERIC_TIMEZONE=Europe/Paris
      
      # Configuration base de données PostgreSQL
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      - DB_POSTGRESDB_PORT=${POSTGRES_PORT}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=public
      
      # Configuration sécurité et production
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
      
      # Fonctionnalités et optimisations
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED}
      - N8N_VERSION_NOTIFICATIONS_ENABLED=${N8N_VERSION_NOTIFICATIONS_ENABLED}
      - N8N_TEMPLATES_ENABLED=${N8N_TEMPLATES_ENABLED}
      - N8N_PUBLIC_API_DISABLED=${N8N_PUBLIC_API_DISABLED}
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=${N8N_DISABLE_PRODUCTION_MAIN_PROCESS}
      - N8N_ONBOARDING_FLOW_DISABLED=false
      - N8N_METRICS=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_LISTEN_ADDRESS=0.0.0.0
      
      # Configuration logs et workflow
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      
      # Configuration Redis pour la mise en cache et les queues
      - N8N_QUEUE_BULL_REDIS_HOST=${N8N_QUEUE_BULL_REDIS_HOST}
      - N8N_QUEUE_BULL_REDIS_PORT=${N8N_QUEUE_BULL_REDIS_PORT}
      - N8N_QUEUE_BULL_REDIS_PASSWORD=${N8N_QUEUE_BULL_REDIS_PASSWORD}
      - N8N_CACHE_REDIS_HOST=${N8N_CACHE_REDIS_HOST}
      - N8N_CACHE_REDIS_PORT=${N8N_CACHE_REDIS_PORT}
      - N8N_CACHE_REDIS_PASSWORD=${N8N_CACHE_REDIS_PASSWORD}
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_workflows:/home/node/workflows
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.top-exo.fr`)"
      - "traefik.http.routers.n8n.entrypoints=https"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.docker.network=reverse-proxy"
    networks:
      - reverse-proxy
      - mcp-network
    depends_on:
      - postgres
      - redis
      - quadrant
      - mcp-weather-server

  # Redis - Cache et mémoire pour les workflows n8n
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mcp-network
    ports:
      - "6379:6379"

  # Quadrant - Base de données vectorielle pour RAG
  quadrant:
    image: qdrant/qdrant:latest
    container_name: n8n-quadrant
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
    volumes:
      - quadrant_data:/qdrant/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mcp-network
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API

networks:
  reverse-proxy:
    name: reverse-proxy
    external: true
  mcp-network:
    driver: bridge

volumes:
  n8n_data:
    name: n8n_data
  n8n_workflows:
    name: n8n_workflows
  postgres_data:
    name: n8n_postgres_data
  redis_data:
    name: n8n_redis_data
  quadrant_data:
    name: n8n_quadrant_data
